# auto-generated by Cody. Be carefull
def gcd(a, b):
    return gcd(b, a % b) if b else a

def lcd(a, b):
    return a // gcd(a, b) * b

def compute_primes(n):  # Sieve of Eratosthenes
    sieve = [True] * (n + 1) # Sieve
    primes = []  # vector to which prime numbers will be added
    
    for i in range(2, n + 1):  # Initially, all the numbers are not crossed out
        if sieve[i]:
            primes.append(i)
            for j in range(i * i, n + 1, i):  # cross out all multiples starting from i^2
                sieve[j] = False
    return primes
